function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function create_slot(definition, ctx, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, fn) {
    return definition[1]
        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))
        : ctx.$$scope.ctx;
}
function get_slot_changes(definition, ctx, changed, fn) {
    return definition[1]
        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))
        : ctx.$$scope.changed || {};
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function flush() {
    const seen_callbacks = new Set();
    do {
        // first, call beforeUpdate functions
        // and update components
        while (dirty_components.length) {
            const component = dirty_components.shift();
            set_current_component(component);
            update(component.$$);
        }
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                callback();
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
}
function update($$) {
    if ($$.fragment) {
        $$.update($$.dirty);
        run_all($$.before_update);
        $$.fragment.p($$.dirty, $$.ctx);
        $$.dirty = null;
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}

const globals = (typeof window !== 'undefined' ? window : global);
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    if (component.$$.fragment) {
        run_all(component.$$.on_destroy);
        component.$$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        component.$$.on_destroy = component.$$.fragment = null;
        component.$$.ctx = {};
    }
}
function make_dirty(component, key) {
    if (!component.$$.dirty) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty = blank_object();
    }
    component.$$.dirty[key] = true;
}
function init(component, options, instance, create_fragment, not_equal, prop_names) {
    const parent_component = current_component;
    set_current_component(component);
    const props = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props: prop_names,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty: null
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, props, (key, value) => {
            if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {
                if ($$.bound[key])
                    $$.bound[key](value);
                if (ready)
                    make_dirty(component, key);
            }
        })
        : props;
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment($$.ctx);
    if (options.target) {
        if (options.hydrate) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.l(children(options.target));
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error(`'target' is a required option`);
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn(`Component was already destroyed`); // eslint-disable-line no-console
        };
    }
}

/* src\Swipe.svelte generated by Svelte v3.9.1 */
const { console: console_1 } = globals;

const file = "src\\Swipe.svelte";

function add_css() {
	var style = element("style");
	style.id = 'svelte-ch1qj4-style';
	style.textContent = ".swipe-panel.svelte-ch1qj4{position:relative;height:var(--sv-swipe-panel-height, 100%);width:var(--sv-swipe-panel-width, inherit)}.swipe-item-wrapper.svelte-ch1qj4{overflow:hidden;position:relative;height:inherit;z-index:var(--sv-swipe-panel-wrapper-index, 2);pointer-events:none}.swipeable-items.svelte-ch1qj4,.swipeable-slot-wrapper.svelte-ch1qj4{position:relative;width:inherit;height:inherit}.swipe-handler.svelte-ch1qj4{width:100%;position:absolute;top:40px;bottom:0px;left:0;right:0;background:rgba(0,0,0,0)}.swipe-indicator.svelte-ch1qj4{position:relative;bottom:1.5rem;display:flex;justify-content:center;z-index:var(--sv-swipe-panel-wrapper-index, 2);pointer-events:none}.dot.svelte-ch1qj4{height:10px;width:10px;background-color:transparent;border:1px solid grey;border-radius:50%;display:inline-block;margin:0px 2px;cursor:pointer;pointer-events:fill}.swipe-indicator.svelte-ch1qj4 .is-active.svelte-ch1qj4{background-color:var(--sv-swipe-indicator-active-color, grey)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.x = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (252:3) {#if showIndicators}
function create_if_block(ctx) {
	var div;

	var each_value = ctx.indicators;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c: function create() {
			div = element("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			attr(div, "class", "swipe-indicator swipe-indicator-inside svelte-ch1qj4");
			add_location(div, file, 252, 5, 6048);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},

		p: function update_1(changed, ctx) {
			if (changed.activeIndicator || changed.indicators) {
				each_value = ctx.indicators;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

// (254:8) {#each indicators as x, i }
function create_each_block(ctx) {
	var span, span_class_value, dispose;

	function click_handler() {
		return ctx.click_handler(ctx);
	}

	return {
		c: function create() {
			span = element("span");
			attr(span, "class", span_class_value = "dot " + (ctx.activeIndicator == ctx.i ? 'is-active' : '') + " svelte-ch1qj4");
			add_location(span, file, 254, 10, 6149);
			dispose = listen(span, "click", click_handler);
		},

		m: function mount(target, anchor) {
			insert(target, span, anchor);
		},

		p: function update_1(changed, new_ctx) {
			ctx = new_ctx;
			if ((changed.activeIndicator) && span_class_value !== (span_class_value = "dot " + (ctx.activeIndicator == ctx.i ? 'is-active' : '') + " svelte-ch1qj4")) {
				attr(span, "class", span_class_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(span);
			}

			dispose();
		}
	};
}

function create_fragment(ctx) {
	var div4, div2, div1, div0, t0, div3, t1, current, dispose;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, null);

	var if_block = (ctx.showIndicators) && create_if_block(ctx);

	return {
		c: function create() {
			div4 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");

			if (default_slot) default_slot.c();
			t0 = space();
			div3 = element("div");
			t1 = space();
			if (if_block) if_block.c();

			attr(div0, "class", "swipeable-slot-wrapper svelte-ch1qj4");
			add_location(div0, file, 245, 6, 5813);
			attr(div1, "class", "swipeable-items svelte-ch1qj4");
			add_location(div1, file, 244, 4, 5776);
			attr(div2, "class", "swipe-item-wrapper svelte-ch1qj4");
			add_location(div2, file, 243, 2, 5713);
			attr(div3, "class", "swipe-handler svelte-ch1qj4");
			add_location(div3, file, 250, 2, 5907);
			attr(div4, "class", "swipe-panel svelte-ch1qj4");
			add_location(div4, file, 242, 0, 5684);

			dispose = [
				listen(div3, "touchstart", ctx.moveStart),
				listen(div3, "mousedown", ctx.moveStart)
			];
		},

		l: function claim(nodes) {
			if (default_slot) default_slot.l(div0_nodes);
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},

		m: function mount(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div2);
			append(div2, div1);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			ctx.div2_binding(div2);
			append(div4, t0);
			append(div4, div3);
			ctx.div3_binding(div3);
			append(div4, t1);
			if (if_block) if_block.m(div4, null);
			current = true;
		},

		p: function update_1(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, null),
					get_slot_context(default_slot_template, ctx, null)
				);
			}

			if (ctx.showIndicators) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div4, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div4);
			}

			if (default_slot) default_slot.d(detaching);
			ctx.div2_binding(null);
			ctx.div3_binding(null);
			if (if_block) if_block.d();
			run_all(dispose);
		}
	};
}

let topClearence = 0;

let min = 0;

function instance($$self, $$props, $$invalidate) {
	let { transitionDuration = 200, showIndicators = false, autoplay = false, delay = 1000, defaultIndex = 0 } = $$props;


  let activeIndicator = 0;
  let indicators;
  let items = 0;
  let availableWidth = 0;

  let elems;
  let diff = 0;

  let swipeWrapper;
  let swipeHandler;
  let touchingTpl = `
    -webkit-transition-duration: 0s;
    transition-duration: 0s;
    -webkit-transform: translate3d(-{{val}}px, 0, 0);
    -ms-transform: translate3d(-{{val}}px, 0, 0);`;
  let non_touchingTpl = `
    -webkit-transition-duration: ${transitionDuration}ms;
    transition-duration: ${transitionDuration}ms;
    -webkit-transform: translate3d(-{{val}}px, 0, 0);
    -ms-transform: translate3d(-{{val}}px, 0, 0);`;
  let touching = false;
  let posX = 0;
  let x;



  let played = defaultIndex || 0;
  let run_interval = false;


  function update(){
    swipeHandler.style.top = topClearence + 'px'; $$invalidate('swipeHandler', swipeHandler);
    availableWidth = swipeWrapper.querySelector('.swipeable-items').offsetWidth;
    for (let i = 0; i < items; i++) {
      elems[i].style.transform = 'translate3d(' + (availableWidth * i) + 'px, 0, 0)';    }
    diff = 0;
    if(defaultIndex){
      changeItem(defaultIndex);
    }
  }

  function init(){
    elems = swipeWrapper.querySelectorAll('.swipeable-item');
    $$invalidate('items', items = elems.length);
    update();
  }

  onMount(() => {
    init();
    window.addEventListener('resize', update);
  });



  onDestroy(()=>{
    window.removeEventListener('resize', update);
  });

  function moveHandler(e){
    if (touching) {
      e.stopImmediatePropagation();
      e.stopPropagation();


      let max = availableWidth;

      let _x = e.touches ? e.touches[0].pageX : e.pageX;
      let _diff = (x - _x) + posX;
      let dir = _x > x ? 0 : 1;
      if (!dir) { _diff = posX - (_x - x); }
      if (_diff <= (max * (items - 1)) && _diff >= min) {

        for (let i = 0; i < items; i++) {
          let template = i < 0 ? '{{val}}' : '-{{val}}';
          let _value = (max * i) - _diff;
          elems[i].style.cssText = touchingTpl.replace(template, _value).replace(template, _value);        }

        diff = _diff;
      }

    }
  }

  function endHandler(e) {
    e && e.stopImmediatePropagation();
    e && e.stopPropagation();
    e && e.preventDefault();

    let max = availableWidth;

    touching = false;
    x = null;



    let swipe_threshold = 0.85;
    let d_max = (diff / max);
    let _target = Math.round(d_max);

    if(Math.abs(_target - d_max) < swipe_threshold ){
      diff = _target * max;
    }else{
      diff = ( (_target + 1)) * max;
    }

    posX = diff;
    $$invalidate('activeIndicator', activeIndicator = (diff / max));
    for (let i = 0; i < items; i++) {
      let template = i < 0 ? '{{val}}' : '-{{val}}';
      let _value = (max * i) - posX;
      elems[i].style.cssText = non_touchingTpl.replace(template, _value).replace(template, _value);    }

    window.removeEventListener('mousemove', moveHandler);
    window.removeEventListener('mouseup', endHandler);
    window.removeEventListener('touchmove', moveHandler);
    window.removeEventListener('touchend', endHandler);
  }

  function moveStart(e){
    e.stopImmediatePropagation();
    e.stopPropagation();
    e.preventDefault();

    touching = true;
    x = e.touches ? e.touches[0].pageX : e.pageX;
    window.addEventListener('mousemove', moveHandler);
    window.addEventListener('mouseup', endHandler);
    window.addEventListener('touchmove', moveHandler);
    window.addEventListener('touchend', endHandler);
  }

  function changeItem(item) {
    let max = availableWidth;
    diff = max * item;
    $$invalidate('activeIndicator', activeIndicator = item);
    endHandler();
  }

  function changeView() {
    changeItem(played);
    played = played < (items - 1) ? ++played : 0;  }

  let { goTo = (step) => {
    let item = Math.max(0, Math.min(activeIndicator + step, indicators.length - 1));
    changeItem(item);
    console.log(item);
  } } = $$props;

	const writable_props = ['transitionDuration', 'showIndicators', 'autoplay', 'delay', 'defaultIndex', 'goTo'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console_1.warn(`<Swipe> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('swipeWrapper', swipeWrapper = $$value);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('swipeHandler', swipeHandler = $$value);
		});
	}

	function click_handler({ i }) {changeItem(i);}

	$$self.$set = $$props => {
		if ('transitionDuration' in $$props) $$invalidate('transitionDuration', transitionDuration = $$props.transitionDuration);
		if ('showIndicators' in $$props) $$invalidate('showIndicators', showIndicators = $$props.showIndicators);
		if ('autoplay' in $$props) $$invalidate('autoplay', autoplay = $$props.autoplay);
		if ('delay' in $$props) $$invalidate('delay', delay = $$props.delay);
		if ('defaultIndex' in $$props) $$invalidate('defaultIndex', defaultIndex = $$props.defaultIndex);
		if ('goTo' in $$props) $$invalidate('goTo', goTo = $$props.goTo);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$$.update = ($$dirty = { items: 1, autoplay: 1, run_interval: 1, delay: 1 }) => {
		if ($$dirty.items) { $$invalidate('indicators', indicators = Array(items)); }
		if ($$dirty.autoplay || $$dirty.run_interval || $$dirty.delay) { {
        if(autoplay && !run_interval){
          $$invalidate('run_interval', run_interval = setInterval(changeView , delay));
        }
    
        if(!autoplay && run_interval){
          clearInterval(run_interval);
          $$invalidate('run_interval', run_interval = false);
        }
      } }
	};

	return {
		transitionDuration,
		showIndicators,
		autoplay,
		delay,
		defaultIndex,
		activeIndicator,
		indicators,
		swipeWrapper,
		swipeHandler,
		moveStart,
		changeItem,
		goTo,
		div2_binding,
		div3_binding,
		click_handler,
		$$slots,
		$$scope
	};
}

class Swipe extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-ch1qj4-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, ["transitionDuration", "showIndicators", "autoplay", "delay", "defaultIndex", "goTo"]);
	}

	get transitionDuration() {
		return this.$$.ctx.transitionDuration;
	}

	set transitionDuration(transitionDuration) {
		this.$set({ transitionDuration });
		flush();
	}

	get showIndicators() {
		return this.$$.ctx.showIndicators;
	}

	set showIndicators(showIndicators) {
		this.$set({ showIndicators });
		flush();
	}

	get autoplay() {
		return this.$$.ctx.autoplay;
	}

	set autoplay(autoplay) {
		this.$set({ autoplay });
		flush();
	}

	get delay() {
		return this.$$.ctx.delay;
	}

	set delay(delay) {
		this.$set({ delay });
		flush();
	}

	get defaultIndex() {
		return this.$$.ctx.defaultIndex;
	}

	set defaultIndex(defaultIndex) {
		this.$set({ defaultIndex });
		flush();
	}

	get goTo() {
		return this.$$.ctx.goTo;
	}

	set goTo(goTo) {
		this.$set({ goTo });
		flush();
	}
}

/* src\SwipeItem.svelte generated by Svelte v3.9.1 */

const file$1 = "src\\SwipeItem.svelte";

function add_css$1() {
	var style = element("style");
	style.id = 'svelte-exn8e7-style';
	style.textContent = ".swipeable-item.svelte-exn8e7{position:absolute;top:0;bottom:0;left:0;right:0;transition-timing-function:ease-out}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3dpcGVJdGVtLnN2ZWx0ZSIsInNvdXJjZXMiOlsiU3dpcGVJdGVtLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG4gIGV4cG9ydCBsZXQgY2xhc3NlcyA9ICcnO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAuc3dpcGVhYmxlLWl0ZW0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9XCJzd2lwZWFibGUtaXRlbSB7Y2xhc3Nlc31cIj5cclxuICAgIDxzbG90IC8+XHJcbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLRSxlQUFlLGNBQUMsQ0FBQyxBQUNmLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLEdBQUcsQ0FBRSxDQUFDLENBQ04sTUFBTSxDQUFFLENBQUMsQ0FDVCxJQUFJLENBQUUsQ0FBQyxDQUNQLEtBQUssQ0FBRSxDQUFDLENBQ1IsMEJBQTBCLENBQUUsUUFBUSxBQUN0QyxDQUFDIn0= */";
	append(document.head, style);
}

function create_fragment$1(ctx) {
	var div, div_class_value, current;

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, null);

	return {
		c: function create() {
			div = element("div");

			if (default_slot) default_slot.c();

			attr(div, "class", div_class_value = "swipeable-item " + ctx.classes + " svelte-exn8e7");
			add_location(div, file$1, 15, 0, 224);
		},

		l: function claim(nodes) {
			if (default_slot) default_slot.l(div_nodes);
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, null),
					get_slot_context(default_slot_template, ctx, null)
				);
			}

			if ((!current || changed.classes) && div_class_value !== (div_class_value = "swipeable-item " + ctx.classes + " svelte-exn8e7")) {
				attr(div, "class", div_class_value);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { classes = '' } = $$props;

	const writable_props = ['classes'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<SwipeItem> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('classes' in $$props) $$invalidate('classes', classes = $$props.classes);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { classes, $$slots, $$scope };
}

class SwipeItem extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document.getElementById("svelte-exn8e7-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["classes"]);
	}

	get classes() {
		throw new Error("<SwipeItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classes(value) {
		throw new Error("<SwipeItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Swipe, SwipeItem };
//# sourceMappingURL=bundle.js.map
